openapi: 3.0.0
info:
  version: 1.0.0
  title: geo-forms-svc
  description: ''
servers:
  - url: 'https://api.demo.tokend.io'
    description: TokenD Developer Environment
paths:
  /integrations/forms-svc/v1/form:
    post:
      tags:
        - User form
      summary: Submit lightweight user answers
      description: |
        Sending the filled form. Requires created empty form
        linked to the name of the file with the photo. 
        Return form current status.

        The image is a link to s3 storage    
      operationId: lightweightSubmitForm
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/Form'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/FormStatus'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '401':
          $ref: '#/components/responses/invalidAuth'
        '403':
          description: 'Empty form absent for user, but processed or accepted one exists'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  /integrations/forms-svc/v1/form/submit:
    post:
      tags:
        - User form
      summary: Submit user answers
      description: |
        Send user answers and return their current status.

        The image is a base64 string.

        Only a user with a confirmed passport can send the form ('verified: true' in JWT).
        There is a configurable delay before the same user
        can submit another form.
      operationId: submitForm
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/Form'
      responses:
        '200':
          description: Success. All fields except image will be returned.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Form'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '401':
          $ref: '#/components/responses/invalidAuth'
        '429':
          description: It is necessary to wait some time before sending the next form
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          $ref: '#/components/responses/internalError'
  /integrations/forms-svc/v1/image:
    post:
      tags:
        - User form
      summary: Generate pre-signed url
      description: |
        Generate pre-signed URL for the provided content-length 
        and content-type, with a configurable lifetime. 
        The response contains a URL with a signature and 
        other information that should be used to upload image 
        in S3 Storage. The name is generated on the server side.
        'verified: true' must be specified in the JWT.
        The cooldown of this endpoint is the same as in the submit form.
        This endpoint creates an empty form that can be submitted on `/form`
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/UploadImage'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '401':
          $ref: '#/components/responses/invalidAuth'
        '429':
          description: It is necessary to wait some time before sending the next form
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          $ref: '#/components/responses/internalError'
  '/integrations/forms-svc/v1/status/{id}':
    get:
      tags:
        - User form
      summary: Get form status
      description: |
        Get form status by UUID.
      operationId: getFormStatus
      parameters:
        - $ref: '#/components/parameters/pathID'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Form'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '401':
          $ref: '#/components/responses/invalidAuth'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
  /integrations/forms-svc/v1/status/last:
    get:
      tags:
        - User form
      summary: Get last form status
      description: |
        Get last form status filled out by the user nullifier.
      operationId: getLastFormStatus
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/FormStatus'
        '400':
          $ref: '#/components/responses/invalidParameter'
        '401':
          $ref: '#/components/responses/invalidAuth'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalError'
components:
  schemas:
    Errors:
      description: 'Standard JSON:API error'
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: Non empty array of errors occurred during request processing
          items:
            type: object
            required:
              - title
              - status
            properties:
              title:
                type: string
                description: 'Title is a short, human-readable summary of the problem'
                example: Bad Request
              detail:
                type: string
                description: Detail is a human-readable explanation specific to this occurrence of the problem
                example: Request body was expected
              status:
                type: integer
                description: Status is the HTTP status code applicable to this problem
                example: 400
                enum:
                  - 400
                  - 401
                  - 403
                  - 404
                  - 409
                  - 500
    Form:
      allOf:
        - $ref: '#/components/schemas/FormKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - name
                - surname
                - id_num
                - birthday
                - citizen
                - visited
                - purpose
                - country
                - city
                - address
                - postal
                - phone
                - email
                - image
              properties:
                status:
                  type: string
                  enum:
                    - accepted
                    - processed
                  description: |
                    Accepted - the data was saved by the service for further processing
                    Processed - the data is processed and stored
                    Read-only.
                name:
                  type: string
                  example: Hilary
                surname:
                  type: string
                  example: Cabe
                id_num:
                  type: string
                  example: '3736297649'
                birthday:
                  type: string
                  example: 27/6/1988
                citizen:
                  type: string
                  example: Georgian
                visited:
                  type: string
                  example: 18/07/2024
                purpose:
                  type: string
                  example: Make documents
                country:
                  type: string
                  example: Georgia
                city:
                  type: string
                  example: Kutaisi
                address:
                  type: string
                  example: 'Central street, 1'
                postal:
                  type: string
                  example: '21626'
                phone:
                  type: string
                  example: '+13165282105'
                email:
                  type: string
                  example: cabehilary88@gmail.com
                image:
                  type: string
                  description: |
                    base64 encoded image with max size 4 MB or
                    URL for S3 storage with image up to 4 mb
                  example: 'https://geoforms.nyc3.digitaloceanspaces.com/awesome_phono.jpg'
    FormKey:
      type: object
      required:
        - type
      properties:
        id:
          type: string
          description: UUID for check form submission status
        type:
          type: string
          enum:
            - form
            - submit_form
    FormStatus:
      allOf:
        - $ref: '#/components/schemas/FormStatusKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - status
                - created_at
                - next_form_at
                - until_next_form
              properties:
                status:
                  type: string
                  enum:
                    - created
                    - accepted
                    - processed
                  description: |
                    Created - the empty form was created and now user can't use legacy submit
                    Accepted - the data was saved by the service for further processing
                    Processed - the data is processed and stored
                created_at:
                  type: integer
                  format: int64
                  example: 1721392530
                  description: Form submission time. Unix time.
                processed_at:
                  type: integer
                  format: int64
                  example: 1721392530
                  description: Form processing time. Absent if the status is accepted. Unix time.
                next_form_at:
                  type: integer
                  format: int64
                  example: 1721392530
                  description: Time of the next possible form submission. Unix time.
                until_next_form:
                  type: integer
                  format: int64
                  example: 120
                  description: Time until the next form submission in seconds.
    FormStatusKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - form_status
    UploadImage:
      allOf:
        - $ref: '#/components/schemas/UploadImageKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - content_type
                - content_length
              properties:
                content_type:
                  type: string
                  example: image/png
                  description: Allowed content-type is `image/png` or `image/jpeg`
                content_length:
                  type: integer
                  format: int64
                  example: 150000
                  description: Image size. It cannot be more than 4 megabytes.
    UploadImageKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - upload_image
    UploadImageResponse:
      allOf:
        - $ref: '#/components/schemas/UploadImageResponseKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  description: Pre-signed URL to upload the file
                  example: 'https://bucket.nyc3.digitaloceanspaces.com/somefile?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=DO00PTJRCBZELX6E4EEK%2F20240722%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240722T133921Z&X-Amz-Expires=300&X-Amz-SignedHeaders=host&X-Amz-Signature=940c9058b90e8836b03470fdb51af1f24baabc16a7a83b80352d3d618aa4f23f'
    UploadImageResponseKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: UUID to check form submission status
        type:
          type: string
          enum:
            - upload_image_response
  responses:
    internalError:
      description: Internal server error
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    invalidAuth:
      description: You must provide a valid authorization params.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    invalidParameter:
      description: One of the parameters is invalid. Refer to the response body for details.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    notFound:
      description: Requested resource does not exist.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
  parameters:
    pageLimitParam:
      in: query
      name: 'page[limit]'
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15
        description: Numbers of items per page to return.
    pageNumberParam:
      in: query
      name: 'page[number]'
      required: false
      schema:
        type: integer
      description: The number of a page to return.
    pathID:
      in: path
      name: id
      required: true
      schema:
        type: string
        example: dc3d2b96-9ff1-4f54-9fb6-005a518089fe
    sortingParam:
      in: query
      name: 'page[order]'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
        description: 'Order of records on the page. If sortingParam is not specified, order of records is by default sorted by ID.'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
